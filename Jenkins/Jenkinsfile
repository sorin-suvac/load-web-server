pipeline {

    agent any

    environment {
        AWS_CREDENTIALS = '/mnt/c/Users/ssuva/.aws/credentials'
        SSH_KEY_FILE = 'aws-ssh-key.pem'
        MASTER_IP = ''
        WORKERS_IPS = ''
    }

    parameters {
        booleanParam(name: 'STAGE_TERRAFORM_APPLY', defaultValue: true, description: 'Enable "Terraform apply" stage')
        booleanParam(name: 'STAGE_INSTALL_K8S', defaultValue: true, description: 'Enable "Install K8S" stage')
        booleanParam(name: 'STAGE_TERRAFORM_DESTROY', defaultValue: true, description: 'Enable "Terraform destroy" stage')
    }

    stages {
        stage('Terraform apply') {
            when {
                expression {
                    return params.STAGE_TERRAFORM_APPLY
                }
            }
            steps {
                dir('Terraform') {
                    script {
                        sh 'terraform init -upgrade -no-color'
                        sh 'terraform plan -input=false -var="aws_credentials=${AWS_CREDENTIALS}" -var="ssh_key_file=${SSH_KEY_FILE}" -out my-plan -no-color'
                        sh 'terraform apply -input=false my-plan -no-color'
                        MASTER_IP = sh(script: 'terraform output -raw master_ip', returnStdout: true)
                        def jsonIPs = sh(script: 'terraform output -json worker_ips', returnStdout: true)
                        def jsonSlurper = new groovy.json.JsonSlurper()
                        WORKERS_IPS = jsonSlurper.parseText(jsonIPs)
                        sh "ls -l ${SSH_KEY_FILE}"
                    }
                }
            }
        }
        stage('Install K8S') {
            when {
                expression {
                    return params.STAGE_INSTALL_K8S
                }
            }
            steps {
                dir('Terraform') {
                    script {
                        sh "until ssh -i ${SSH_KEY_FILE} ubuntu@${MASTER_IP}; do sleep 5; done"
                        sh "ssh -i ${SSH_KEY_FILE} ubuntu@${MASTER_IP} /tmp/install-kubeadm.sh"
                        sh "ssh -i ${SSH_KEY_FILE} ubuntu@${MASTER_IP} /tmp/init-kubeadm.sh"
                        def kubeadmJoinCmd = sh(script: "ssh -i ${SSH_KEY_FILE} ubuntu@${MASTER_IP} kubeadm token create --print-join-command", returnStdout: true)
                        ${WORKERS_IPS}.each { workerIp ->
                            sh "until ssh -i ${SSH_KEY_FILE} ubuntu@${workerIp}; do sleep 5; done"
                            sh "ssh -i ${SSH_KEY_FILE} ubuntu@${workerIp} /tmp/install-kubeadm.sh"
                            sh "ssh -i ${SSH_KEY_FILE} ubuntu@${workerIp} sudo ${kubeadmJoinCmd} --v=5"
                        }
                    }
                }
            }
        }
        stage('Terraform destroy') {
            when {
                expression {
                    return params.STAGE_TERRAFORM_DESTROY
                }
            }
            steps {
                dir('Terraform') {
                    sh 'terraform destroy -var="aws_credentials=${AWS_CREDENTIALS}" -auto-approve -no-color'
                }
            }
        }
    }
}
